<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.catering.dao.elsecost.ElseCostMapper">
<cache type="cn.catering.cache.RedisCache"></cache>
  <resultMap id="BaseResultMap" type="cn.catering.pojo.ElseCost">
    <id column="costId" jdbcType="INTEGER" property="costId" />
    <result column="costName" jdbcType="VARCHAR" property="costName" />
    <result column="money" jdbcType="DECIMAL" property="money" />
    <result column="createDate" jdbcType="TIMESTAMP" property="createDate" />
    <result column="costTypeId" jdbcType="INTEGER" property="costTypeId" />
    <result column="empId" jdbcType="INTEGER" property="empId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    costId, costName, money, createDate, costTypeId, empId
  </sql>
  <select id="selectByExample" parameterType="cn.catering.pojo.ElseCostExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from elsecost
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from elsecost
    where costId = #{costId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from elsecost
    where costId = #{costId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.catering.pojo.ElseCostExample">
    delete from elsecost
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.catering.pojo.ElseCost">
    insert into elsecost (costId, costName, money, 
      createDate, costTypeId, empId
      )
    values (#{costId,jdbcType=INTEGER}, #{costName,jdbcType=VARCHAR}, #{money,jdbcType=DECIMAL}, 
      #{createDate,jdbcType=TIMESTAMP}, #{costTypeId,jdbcType=INTEGER}, #{empId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.catering.pojo.ElseCost">
    insert into elsecost
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="costId != null">
        costId,
      </if>
      <if test="costName != null">
        costName,
      </if>
      <if test="money != null">
        money,
      </if>
      <if test="createDate != null">
        createDate,
      </if>
      <if test="costTypeId != null">
        costTypeId,
      </if>
      <if test="empId != null">
        empId,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="costId != null">
        #{costId,jdbcType=INTEGER},
      </if>
      <if test="costName != null">
        #{costName,jdbcType=VARCHAR},
      </if>
      <if test="money != null">
        #{money,jdbcType=DECIMAL},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="costTypeId != null">
        #{costTypeId,jdbcType=INTEGER},
      </if>
      <if test="empId != null">
        #{empId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.catering.pojo.ElseCostExample" resultType="java.lang.Integer">
    select count(*) from elsecost
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update elsecost
    <set>
      <if test="record.costId != null">
        costId = #{record.costId,jdbcType=INTEGER},
      </if>
      <if test="record.costName != null">
        costName = #{record.costName,jdbcType=VARCHAR},
      </if>
      <if test="record.money != null">
        money = #{record.money,jdbcType=DECIMAL},
      </if>
      <if test="record.createDate != null">
        createDate = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.costTypeId != null">
        costTypeId = #{record.costTypeId,jdbcType=INTEGER},
      </if>
      <if test="record.empId != null">
        empId = #{record.empId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update elsecost
    set costId = #{record.costId,jdbcType=INTEGER},
      costName = #{record.costName,jdbcType=VARCHAR},
      money = #{record.money,jdbcType=DECIMAL},
      createDate = #{record.createDate,jdbcType=TIMESTAMP},
      costTypeId = #{record.costTypeId,jdbcType=INTEGER},
      empId = #{record.empId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.catering.pojo.ElseCost">
    update elsecost
    <set>
      <if test="costName != null">
        costName = #{costName,jdbcType=VARCHAR},
      </if>
      <if test="money != null">
        money = #{money,jdbcType=DECIMAL},
      </if>
      <if test="createDate != null">
        createDate = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="costTypeId != null">
        costTypeId = #{costTypeId,jdbcType=INTEGER},
      </if>
      <if test="empId != null">
        empId = #{empId,jdbcType=INTEGER},
      </if>
    </set>
    where costId = #{costId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.catering.pojo.ElseCost">
    update elsecost
    set costName = #{costName,jdbcType=VARCHAR},
      money = #{money,jdbcType=DECIMAL},
      createDate = #{createDate,jdbcType=TIMESTAMP},
      costTypeId = #{costTypeId,jdbcType=INTEGER},
      empId = #{empId,jdbcType=INTEGER}
    where costId = #{costId,jdbcType=INTEGER}
  </update>
</mapper>