<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.catering.dao.member.MemberMapper">
	<cache type="cn.catering.cache.RedisCache"></cache>
  <resultMap id="BaseResultMap" type="cn.catering.pojo.Member">
    <id column="memberId" jdbcType="INTEGER" property="memberId" />
    <result column="memberName" jdbcType="VARCHAR" property="memberName" />
    <result column="account" jdbcType="INTEGER" property="account" />
    <result column="gender" jdbcType="CHAR" property="gender" />
    <result column="birthdate" jdbcType="TIMESTAMP" property="birthdate" />
    <result column="phone" jdbcType="BIGINT" property="phone" />
    <result column="createDate" jdbcType="TIMESTAMP" property="createDate" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="integral" jdbcType="INTEGER" property="integral" />
    <result column="balance" jdbcType="DECIMAL" property="balance" />
    <result column="totalConsumption" jdbcType="DECIMAL" property="totalConsumption" />
    <result column="cardId" jdbcType="INTEGER" property="cardId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    memberId, memberName, account, gender, birthdate, phone, createDate, state, integral, 
    balance, totalConsumption, cardId
  </sql>
  <select id="selectByExample" parameterType="cn.catering.pojo.MemberExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from member
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from member
    where memberId = #{memberId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from member
    where memberId = #{memberId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.catering.pojo.MemberExample">
    delete from member
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.catering.pojo.Member">
    insert into member (memberId, memberName, account, 
      gender, birthdate, phone, 
      createDate, state, integral, 
      balance, totalConsumption, cardId
      )
    values (#{memberId,jdbcType=INTEGER}, #{memberName,jdbcType=VARCHAR}, #{account,jdbcType=INTEGER}, 
      #{gender,jdbcType=CHAR}, #{birthdate,jdbcType=TIMESTAMP}, #{phone,jdbcType=BIGINT}, 
      #{createDate,jdbcType=TIMESTAMP}, #{state,jdbcType=INTEGER}, #{integral,jdbcType=INTEGER}, 
      #{balance,jdbcType=DECIMAL}, #{totalConsumption,jdbcType=DECIMAL}, #{cardId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.catering.pojo.Member">
    insert into member
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="memberId != null">
        memberId,
      </if>
      <if test="memberName != null">
        memberName,
      </if>
      <if test="account != null">
        account,
      </if>
      <if test="gender != null">
        gender,
      </if>
      <if test="birthdate != null">
        birthdate,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="createDate != null">
        createDate,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="integral != null">
        integral,
      </if>
      <if test="balance != null">
        balance,
      </if>
      <if test="totalConsumption != null">
        totalConsumption,
      </if>
      <if test="cardId != null">
        cardId,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="memberId != null">
        #{memberId,jdbcType=INTEGER},
      </if>
      <if test="memberName != null">
        #{memberName,jdbcType=VARCHAR},
      </if>
      <if test="account != null">
        #{account,jdbcType=INTEGER},
      </if>
      <if test="gender != null">
        #{gender,jdbcType=CHAR},
      </if>
      <if test="birthdate != null">
        #{birthdate,jdbcType=TIMESTAMP},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=BIGINT},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
      <if test="integral != null">
        #{integral,jdbcType=INTEGER},
      </if>
      <if test="balance != null">
        #{balance,jdbcType=DECIMAL},
      </if>
      <if test="totalConsumption != null">
        #{totalConsumption,jdbcType=DECIMAL},
      </if>
      <if test="cardId != null">
        #{cardId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.catering.pojo.MemberExample" resultType="java.lang.Integer">
    select count(*) from member
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update member
    <set>
      <if test="record.memberId != null">
        memberId = #{record.memberId,jdbcType=INTEGER},
      </if>
      <if test="record.memberName != null">
        memberName = #{record.memberName,jdbcType=VARCHAR},
      </if>
      <if test="record.account != null">
        account = #{record.account,jdbcType=INTEGER},
      </if>
      <if test="record.gender != null">
        gender = #{record.gender,jdbcType=CHAR},
      </if>
      <if test="record.birthdate != null">
        birthdate = #{record.birthdate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.phone != null">
        phone = #{record.phone,jdbcType=BIGINT},
      </if>
      <if test="record.createDate != null">
        createDate = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=INTEGER},
      </if>
      <if test="record.integral != null">
        integral = #{record.integral,jdbcType=INTEGER},
      </if>
      <if test="record.balance != null">
        balance = #{record.balance,jdbcType=DECIMAL},
      </if>
      <if test="record.totalConsumption != null">
        totalConsumption = #{record.totalConsumption,jdbcType=DECIMAL},
      </if>
      <if test="record.cardId != null">
        cardId = #{record.cardId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update member
    set memberId = #{record.memberId,jdbcType=INTEGER},
      memberName = #{record.memberName,jdbcType=VARCHAR},
      account = #{record.account,jdbcType=INTEGER},
      gender = #{record.gender,jdbcType=CHAR},
      birthdate = #{record.birthdate,jdbcType=TIMESTAMP},
      phone = #{record.phone,jdbcType=BIGINT},
      createDate = #{record.createDate,jdbcType=TIMESTAMP},
      state = #{record.state,jdbcType=INTEGER},
      integral = #{record.integral,jdbcType=INTEGER},
      balance = #{record.balance,jdbcType=DECIMAL},
      totalConsumption = #{record.totalConsumption,jdbcType=DECIMAL},
      cardId = #{record.cardId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.catering.pojo.Member">
    update member
    <set>
      <if test="memberName != null">
        memberName = #{memberName,jdbcType=VARCHAR},
      </if>
      <if test="account != null">
        account = #{account,jdbcType=INTEGER},
      </if>
      <if test="gender != null">
        gender = #{gender,jdbcType=CHAR},
      </if>
      <if test="birthdate != null">
        birthdate = #{birthdate,jdbcType=TIMESTAMP},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=BIGINT},
      </if>
      <if test="createDate != null">
        createDate = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="integral != null">
        integral = #{integral,jdbcType=INTEGER},
      </if>
      <if test="balance != null">
        balance = #{balance,jdbcType=DECIMAL},
      </if>
      <if test="totalConsumption != null">
        totalConsumption = #{totalConsumption,jdbcType=DECIMAL},
      </if>
      <if test="cardId != null">
        cardId = #{cardId,jdbcType=INTEGER},
      </if>
    </set>
    where memberId = #{memberId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.catering.pojo.Member">
    update member
    set memberName = #{memberName,jdbcType=VARCHAR},
      account = #{account,jdbcType=INTEGER},
      gender = #{gender,jdbcType=CHAR},
      birthdate = #{birthdate,jdbcType=TIMESTAMP},
      phone = #{phone,jdbcType=BIGINT},
      createDate = #{createDate,jdbcType=TIMESTAMP},
      state = #{state,jdbcType=INTEGER},
      integral = #{integral,jdbcType=INTEGER},
      balance = #{balance,jdbcType=DECIMAL},
      totalConsumption = #{totalConsumption,jdbcType=DECIMAL},
      cardId = #{cardId,jdbcType=INTEGER}
    where memberId = #{memberId,jdbcType=INTEGER}
  </update>
</mapper>